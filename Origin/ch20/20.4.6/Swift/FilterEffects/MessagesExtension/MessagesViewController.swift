//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by 关东升 on 2016-11-18.
//  本书网站：http://www.51work6.com
//  智捷课堂在线课堂：http://www.zhijieketang.com/
//  智捷课堂微信公共号：zhijieketang
//  作者微博：@tony_关东升
//  作者微信：tony关东升
//  QQ：569418560 邮箱：eorient@sina.com
//  QQ交流群：162030268
//


import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    @IBOutlet weak var label: UILabel!
    @IBOutlet weak var stepper: UIStepper!
    
    @IBAction func onValueChanged(_ sender: Any) {
        let strValue = String(format: "%.1f", self.stepper.value)
        self.label.text = strValue
    }
    
    @IBAction func onclick(_ sender: Any) {
        
        if let image = filterGaussianBlur(self.stepper.value), let conversation = activeConversation {
            let layout = MSMessageTemplateLayout()
            layout.image = image
            layout.caption = "高斯模糊"
            layout.subcaption = "Radius=\(self.stepper.value)"
            
            let message = MSMessage()
            message.layout = layout
            
            conversation.insert(message, completionHandler: { (error: Error?) in
                if error != nil {
                    print(error!)
                }
                
            })
        }
        
    }
    
    func filterGaussianBlur(_ value : Double) -> UIImage? {
        
        if let image = UIImage(named: "SkyDrive340.png"), let gaussianBlur = CIFilter(name: "CIGaussianBlur") {
            let cImage = CIImage(cgImage: image.cgImage!)
            
            gaussianBlur.setValue(cImage, forKey: "inputImage")
            gaussianBlur.setValue(value, forKey: "inputRadius")
            let result = gaussianBlur.value(forKey: "outputImage") as! CIImage
            
            let context = CIContext(options: nil)
            let imageRef = context.createCGImage(result, from: CGRect(x: 0, y: 0, width: image.size.width, height: image.size.height))
            
            let outputImage =  UIImage(cgImage: imageRef!)
            return outputImage
        }
        
        return nil
    }
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
    
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
        
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
        
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
        
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
    
}
